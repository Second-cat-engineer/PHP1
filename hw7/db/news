a:4:{s:5:"title";s:32:"Это новая новость";s:4:"text";s:43:"это текст новой новости";s:6:"author";s:3:"saf";s:4:"date";i:1576767504;}
a:4:{s:5:"title";s:13:"статья ";s:4:"text";s:23:"новая статья";s:6:"author";s:3:"saf";s:4:"date";i:1576767658;}
a:4:{s:5:"title";s:39:"Приоритеты оператора";s:4:"text";s:2431:"Приоритет оператора определяет, насколько "тесно" он связывает между собой два выражения. Например, выражение 1 + 5 * 3 вычисляется как 16, а не 18, поскольку оператор умножения ("*") имеет более высокий приоритет, чем оператор сложения ("+"). Круглые скобки могут использоваться для принудительного указания порядка выполнения операторов. Например, выражение (1 + 5) * 3 вычисляется как 18.  Если операторы имеют равный приоритет, то будут ли они выполняться справа налево или слева направо определяется их ассоциативностью. К примеру, "-" является лево-ассоциативным оператором. Следовательно 1 - 2 - 3 сгруппируется как (1 - 2) - 3 и пересчитается в -4. С другой стороны "=" - право-ассоциативный оператор, так что $a = $b = $c сгруппируется как $a = ($b = $c).  Неассоциативные операторы с одинаковым приоритетом не могут использоваться совместно. К примеру 1 < 2 > 1 не будет работать в PHP. Выражение 1 <= 1 == 1, с другой стороны, будет, поскольку == имеет более низкий приоритет чем <=.  Использование скобок, кроме случаев когда они строго необходимы, может улучшить читаемость кода, группируя явно, а не полагаясь на приоритеты и ассоциативность.  В следующей таблице приведен список операторов, отсортированный по убыванию их приоритетов. Операторы, размещенные в одной строке имеют одинаковый приоритет и порядок их выполнения определяется исходя из их ассоциативности.";s:6:"author";s:3:"saf";s:4:"date";i:1576775687;}
a:4:{s:5:"title";s:8:"Ужин";s:4:"text";s:56:"Мы с Пандочкой приготовили суп";s:6:"author";s:3:"saf";s:4:"date";i:1576775928;}